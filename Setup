import pygame
from pygame.locals import *
import random
import sys
import math

pygame.init()

#Variables
FPS = 60
FramePerSec = pygame.time.Clock()
SPEED = 5
vec = pygame.math.Vector2
HEIGHT = 350
WIDTH = 700
ACC = 0.3
FRIC = -0.10
COUNT = 0
x = 50
y = 50
HEART_WIDTH = 70
HEART_HEIGHT = 70
TELEPORT_DISTANCE = 100
TELEPORT_COOLDOWN = 60 * 5
score = 0
paused = False

#screen information
screen_width = 1056
screen_height = 840
screen = pygame.display.set_mode((screen_width, screen_height),)
pygame.display.set_caption("Game")

#background
background = pygame.image.load("background.jpg")
background = pygame.transform.scale (background, (screen_width, screen_height))
screen_width, screen_height = background.get_size()

#colours
white = (255, 255, 255)
black = (0,0,0)
yellow = (255, 255, 200)
red = (215, 50, 80)
green = (0, 255, 0)
blue = (50, 150, 215)

#font
font = pygame.font.Font(None, 50)
text_color = (255, 255, 255)
def display_text(text, x, y):
    text_surface = font.render(text, True, text_color)
    screen.blit(text_surface, (x, y))

#start
def start_screen():
    title_font = pygame.font.Font(None, 90) 
    instructions_font = pygame.font.Font(None, 50) 

    title = title_font.render("MONOCRYPT", True, (255, 255, 255))
    title_rect = title.get_rect(center=(screen_width/2, screen_height/2))

    instructions = instructions_font.render("Press SPACE to Start", True, (255, 255, 255))
    instructions_rect = instructions.get_rect(center=(screen_width/2, screen_height/2 + 50))

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:  
                    return  

        screen.fill(black)
        screen.blit(title, title_rect)
        screen.blit(instructions, instructions_rect)
        pygame.display.flip()


#game over
def game_over_screen():
    font = pygame.font.Font(None, 50)
    text = font.render("You Died", True, (255, 0, 0))
    text_rect = text.get_rect(center=(screen_width/2, screen_height/2 -150))

    retry_text = font.render("Press R to Retry", True, (255, 255, 255))
    retry_text_rect = retry_text.get_rect(center=(screen_width/2, screen_height/2 + 0))

    quit_text = font.render("Press Q to Quit", True, (255, 255, 255))
    quit_text_rect = quit_text.get_rect(center=(screen_width/2, screen_height/2 + 70))
    global score

    score_text = font.render(f'Your score is: {score}', True, (255, 255, 255))
    score_text_rect = score_text.get_rect(center=(screen_width/2, screen_height/2 + 150))  # Center the score text

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:  
                    return True  
                elif event.key == pygame.K_q:  
                    return False  

        screen.fill(black)
        screen.blit(text, text_rect)
        screen.blit(retry_text, retry_text_rect)
        screen.blit(quit_text, quit_text_rect)
        screen.blit(score_text, score_text_rect)  # Display the score text
        pygame.display.flip()

# Pause Menu
def pause_menu():
    paused_text = font.render(f'Paused', True, (255, 255, 255))
    paused_rect = paused_text.get_rect(center=(screen_width/2, screen_height // 2 - 300))
    screen.fill(black)
    screen.blit(paused_text, paused_rect)

#bullets variables
bullets = []
shooting = False

class Bullet:
    def __init__(self, x, y, speed, direction, image):
        self.x = x
        self.y = y
        self.speed = speed
        self.direction = direction
        self.image = pygame.image.load(image)
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.remove = False

    def move(self):
        dir_norm = self.direction.normalize()
        self.rect.move_ip(dir_norm.x * self.speed, dir_norm.y * self.speed)
    def draw(self, screen):
        screen.blit(self.image, self.rect)

desired_size = (62, 107)

# Player
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__() 
        self.x = screen_width / 2
        self.y = screen_height / 2
        self.initial_position = pygame.math.Vector2(self.x, self.y)
        self.image = pygame.image.load("player_front.png")
        self.image_front = pygame.image.load("player_front.png")
        self.image_left = pygame.image.load("player_left.png")
        self.image_right = pygame.image.load("player_right_0000.png")
        self.is_animated = False
        self.sprite = []
        self.sprite.append(pygame.image.load("player_right_0000.png"))
        self.sprite.append(pygame.image.load("player_right_0001.png"))
        self.sprite.append(pygame.image.load("player_right_0002.png"))
        self.sprite.append(pygame.image.load("player_right_0003.png"))
        self.sprite.append(pygame.image.load("player_right_0004.png"))
        self.sprite.append(pygame.image.load("player_right_0005.png"))
        self.sprite.append(pygame.image.load("player_right_0006.png"))
        self.sprite.append(pygame.image.load("player_right_0007.png"))
        self.sprite.append(pygame.image.load("player_right_0008.png"))
        self.sprite.append(pygame.image.load("player_right_0009.png"))
        self.sprite.append(pygame.image.load("player_right_0010.png"))
        self.sprite.append(pygame.image.load("player_right_0011.png"))
        self.sprite.append(pygame.image.load("player_right_0012.png"))
        self.sprite.append(pygame.image.load("player_right_0013.png"))
        self.teleport_sprites = []
        self.teleport_sprites.append(pygame.image.load("player_dash_0001.png"))
        self.teleport_sprites.append(pygame.image.load("player_dash_0002.png"))
        self.teleport_sprites.append(pygame.image.load("player_dash_0003.png"))
        self.teleport_sprites.append(pygame.image.load("player_dash_0004.png"))
        self.teleport_sprites.append(pygame.image.load("player_dash_0006.png"))
        self.teleport_sprites.append(pygame.image.load("player_dash_0008.png"))
        self.current_teleport_sprite = 0
        self.is_teleporting = False
        self.current_sprite = 0
        self.image = self.sprite[self.current_sprite]
        self.rect = self.image.get_rect()
        self.rect.center = (self.x, self.y)
        self.direction = pygame.math.Vector2(0, -1)  

        self.rect.width -= 20  
        self.rect.height -= 20  
        self.rect.center = (self.x, self.y)

        self.health = 80
        self.heart_image = pygame.image.load("heart.png")
        self.heart_image = pygame.transform.scale(self.heart_image, (HEART_WIDTH, HEART_HEIGHT))

        self.last_teleport_frame = -TELEPORT_COOLDOWN 
        self.hitbox = pygame.Rect(self.x, self.y, self.rect.width - 0, self.rect.height - 0)
        self.remove = False

    def update(self):
        pressed_keys = pygame.key.get_pressed()
        if self.rect.top > 100:
            if pressed_keys[K_w]:
                if pressed_keys[K_w]:
                    self.image = self.image_front
                    self.rect.move_ip(0, -SPEED)
                    self.direction = pygame.math.Vector2(0, -1)  # Up
        if self.rect.bottom < (screen_height - 100):    
            if pressed_keys[K_s]:
                self.image = self.image_front
                self.rect.move_ip(0, SPEED)
                self.direction = pygame.math.Vector2(0, 1)  # Down
        if self.rect.left > 100:
            if pressed_keys[K_a]:
                self.image = self.image_left
                self.rect.move_ip(-SPEED, 0)
                self.direction = pygame.math.Vector2(-1, 0)  # Left
        if self.rect.right < (screen_width - 100):        
            if pressed_keys[K_d]:
                self.image = self.image_right
                self.rect.move_ip(SPEED, 0)
                self.direction = pygame.math.Vector2(1, 0)  # Right

        if pressed_keys[K_a] or pressed_keys[K_d] or pressed_keys[K_w] or pressed_keys[K_s]:
            self.current_sprite += 0.2
            if self.current_sprite >= len(self.sprite):
                self.current_sprite = 0
            self.image = self.sprite[int(self.current_sprite)]
            
            if pressed_keys[K_a]:
                self.image = pygame.transform.flip(self.image, True, False)
        
        if self.is_teleporting:
            self.current_teleport_sprite += 0.2
            if self.current_teleport_sprite >= len(self.teleport_sprites):
                self.current_teleport_sprite = 0
                self.is_teleporting = False  # End the teleportation animation
            else:
                self.image = self.teleport_sprites[int(self.current_teleport_sprite)]
                if self.direction.x < 0:  # Moving left
                    self.image = pygame.transform.flip(self.image, True, False)

        self.hitbox.topleft = self.rect.topleft

    def draw(self, surface):
        surface.blit(self.image, self.rect)   
    
    #health bar
    def draw_health_hearts(self, surface):
        for i in range(self.health // 20):  
            surface.blit(self.heart_image, (10 + i * HEART_WIDTH, 10)) 
    
    #teleport
    def can_teleport(self, current_frame):
        
        return current_frame - self.last_teleport_frame >= TELEPORT_COOLDOWN

    def teleport(self, current_frame):
        self.is_teleporting = True
        self.current_teleport_sprite = 0
        new_position = self.rect.move(self.direction * TELEPORT_DISTANCE)
        
        
        if new_position.top > 100 and new_position.bottom < (screen_height - 100) and new_position.left > 100 and new_position.right < (screen_width - 100):
            self.rect = new_position
            self.last_teleport_frame = current_frame
        else:
            self.is_teleporting = False
def draw_cooldown_bar(screen, x, y, total_width, height, remaining_cooldown, max_cooldown, color):
    # Calculate the width of the cooldown bar
    bar_width = int(remaining_cooldown / max_cooldown * total_width)

    # Draw the cooldown bar
    pygame.draw.rect(screen, color, pygame.Rect(x, y, bar_width, height))
cooldown_icon = pygame.image.load("cooldown_icon.png") 
cooldown_icon = pygame.transform.scale(cooldown_icon, (50, 50))  

P1 = Player()

# Enemy
class Enemy:
    def __init__(self, x, y, speed, image):
        x = random.randint(0, screen_width - 100)
        y = random.randint(0, screen_height - 100)
        self.rect = pygame.Rect(x, y, 50, 50)  
        self.speed = speed
        self.original_image = pygame.image.load(image)  
        self.image = pygame.transform.scale(self.original_image.copy(), (self.rect.width, self.rect.height))  
        self.invulnerability_duration = 180  
        self.spawn_duration = self.invulnerability_duration  
        self.image = pygame.transform.scale(self.image, (self.rect.width, self.rect.height)) 
        self.bullets = []
        self.shoot_delay = 100
        self.direction = pygame.math.Vector2(1, 2)
        self.health = 100
        self.spawn_duration = 180 
        self.spawn_images = []
        self.spawn_images.append(pygame.image.load("spawn_0000.png"))
        self.spawn_images.append(pygame.image.load("spawn_0001.png"))
        self.spawn_images.append(pygame.image.load("spawn_0002.png"))
        self.spawn_images.append(pygame.image.load("spawn_0003.png"))
        self.spawn_images.append(pygame.image.load("spawn_0004.png"))
        self.spawn_images.append(pygame.image.load("spawn_0005.png"))
        self.spawn_images.append(pygame.image.load("spawn_0006.png"))
        self.spawn_images.append(pygame.image.load("spawn_0007.png"))
        self.spawn_images.append(pygame.image.load("spawn_0008.png"))
        self.current_spawn_sprite = 0  
        self.spawn_sprite_increment = len(self.spawn_images) / self.spawn_duration  
        self.is_dead = False
        self.death_sprites = []
        self.death_sprites.append(pygame.image.load("enemy_death_0000.png"))
        self.death_sprites.append(pygame.image.load("enemy_death_0001.png"))
        self.death_sprites.append(pygame.image.load("enemy_death_0002.png"))
        self.death_sprites.append(pygame.image.load("enemy_death_0003.png"))
        self.death_sprites.append(pygame.image.load("enemy_death_0004.png"))
        self.death_sprites.append(pygame.image.load("enemy_death_0005.png"))
        self.death_sprites.append(pygame.image.load("enemy_death_0006.png"))
        self.death_sprites.append(pygame.image.load("enemy_death_0007.png"))
        self.death_sprites.append(pygame.image.load("enemy_death_0008.png"))
        self.current_death_sprite = 0

    def die(self):
        self.is_dead = True
        self.current_death_sprite = 0
        death_image = self.death_sprites[0]
        self.rect = death_image.get_rect(center=self.rect.center)

    def update(self):  
        if self.spawn_duration > 0:
            self.current_spawn_sprite += self.spawn_sprite_increment  
            if self.current_spawn_sprite >= len(self.spawn_images):
                self.current_spawn_sprite = 0
            self.image = self.spawn_images[int(self.current_spawn_sprite)]
            self.spawn_duration -= 1
            if self.spawn_duration == 0:  
                self.image = pygame.transform.scale(self.original_image.copy(), (self.rect.width, self.rect.height)) 
            return
        if self.is_dead:
            self.current_death_sprite += 0.2
            if self.current_death_sprite >= len(self.death_sprites):
                self.current_death_sprite = 0
                active_enemies.remove(self)  
            return

        if random.randint(0, 50) == 1:  
            new_direction = pygame.math.Vector2(random.uniform(-1, 1), random.uniform(-1, 1))
            new_x = self.rect.x + self.speed * new_direction[0]
            new_y = self.rect.y + self.speed * new_direction[1]
            if 0 <= new_x <= (screen_width-80) - self.rect.width and 0 <= new_y <= (screen_height-80) - self.rect.height:
                self.direction = new_direction   

        new_x = self.rect.x + self.speed * self.direction[0]
        new_y = self.rect.y + self.speed * self.direction[1]
        if 0 <= new_x <= (screen_width-80) - self.rect.width:
            self.rect.x = new_x
        if 0 <= new_y <= (screen_height-80) - self.rect.height:
            self.rect.y = new_y

        if self.shoot_delay > 0:
            self.shoot_delay -= 1
    def draw(self, surface):
        if self.is_dead:
            self.image = self.death_sprites[int(self.current_death_sprite)]
            death_image = pygame.transform.scale(self.image, (self.rect.width, self.rect.height))
            self.rect = death_image.get_rect(center=self.rect.center)
        if self.spawn_duration > 0:
            # Display spawn animation
            image = pygame.transform.scale(self.image, (self.rect.width, self.rect.height))  
            surface.blit(image, self.rect)
        else:
            # Display regular enemy image
            surface.blit(self.image, self.rect)
        

    def shoot(self, target):
        if self.shoot_delay <= 0:  
            dir_vector = vec(target.rect.centerx - self.rect.centerx, target.rect.centery - self.rect.centery)
            bullet = Bullet(self.rect.centerx, self.rect.centery, 5, dir_vector, 'enemy_bullet.png') 
            self.bullets.append(bullet)
            self.shoot_delay = 100


active_enemies = []
enemy = Enemy(100, 100, 2, 'enemy.png')

# Spawn New Enemies
enemy_count = 1

def spawn_new_enemies(num_enemies):
    for _ in range(num_enemies):
        new_enemy = Enemy(random.randint(0, screen_width - 50), random.randint(0, screen_height - 50), 2, 'enemy.png')
        active_enemies.append(new_enemy)

start_screen()
spawn_new_enemies(enemy_count)
current_frame = 0

#arrow code
arrow_image = pygame.image.load('arrow.png')
initial_angle = 0 
arrow_image = pygame.transform.rotate(arrow_image, initial_angle)
arrow_width = 25  
arrow_height = 25 
arrow_image = pygame.transform.scale(arrow_image, (arrow_width, arrow_height))
arrow_offset_x = 0 
arrow_offset_y = 0


#game loop
game = True
while game:
    for event in pygame.event.get(): 
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == MOUSEBUTTONDOWN:
            if event.button == 1:
                mouse_pos = pygame.mouse.get_pos()
                dir_vector = vec(mouse_pos[0] - P1.rect.centerx, mouse_pos[1] - P1.rect.centery)
                bullet = Bullet(P1.rect.centerx, P1.rect.centery, 10, dir_vector, 'bullet.png') 
                bullets.append(bullet)
                shooting = True 
        elif event.type == MOUSEBUTTONUP:
            if event.button == 1:
                shooting = False
        elif event.type == KEYDOWN:
            if event.key == K_LSHIFT:
                if P1.can_teleport(current_frame):
                    P1.teleport(current_frame)
            if event.key == K_ESCAPE:
                paused = not paused
   
    current_frame += 1

    if paused == True:
        pause_menu()
        pygame.display.flip()
        continue

    bullet_buffer = []

    for bullet in bullets:
        bullet.move()
    
    for bullet in bullets:
        bullet.draw(screen)
        for enemy in active_enemies:
            if bullet.rect.colliderect(enemy.rect) and enemy.spawn_duration <= 0:  
                enemy.health -= 50  
                bullet_buffer.append(bullet)
                if enemy.health <= 0 and not enemy.is_dead:
                    enemy.die() 
                break
    for bullet in bullet_buffer:
        bullets.remove(bullet)  


    mouse_pos = pygame.mouse.get_pos()
    rel_x, rel_y = mouse_pos[0] - P1.rect.centerx, mouse_pos[1] - P1.rect.centery
    angle = (180 / math.pi) * -math.atan2(rel_y, rel_x)


    arrow_image_rotated = pygame.transform.rotate(arrow_image, angle)

    
    radius = 90 
    arrow_pos = (P1.rect.centerx + radius * math.cos(math.radians(-angle)), P1.rect.centery + radius * math.sin(math.radians(-angle)))

    
    arrow_rect = arrow_image_rotated.get_rect(center=arrow_pos)






    for enemy in active_enemies:
        for bullet in enemy.bullets:
            bullet.move()

        enemy.update()
        enemy.draw(screen)

        if enemy.health > 0 and enemy.shoot_delay == 0 and not enemy.is_dead:
            enemy.shoot(P1)

        if not active_enemies:
            enemy_count += 1
            spawn_new_enemies(enemy_count)

        if not active_enemies:
            enemy_count += 1
            spawn_new_enemies(enemy_count) 
        
        for enemy in active_enemies:
            for bullet in enemy.bullets:
                if P1.hitbox.colliderect(bullet.rect):
                    P1.health -= 20 
                    bullet.remove = True
                    print(P1.health)
                    break
        
        for enemy in active_enemies:
            enemy.bullets = [bullet for bullet in enemy.bullets if not bullet.remove]

    if P1.health <= 0:
        if game_over_screen():  
            P1 = Player()
            active_enemies.clear()
            enemy = Enemy(100, 100, 2, 'enemy.png')
            enemy_count = 1
            spawn_new_enemies(enemy_count)
            bullets = []
            score = 0
        else:
            pygame.quit()
            sys.exit()
        
    P1.update()

    screen.fill(white)
    screen.blit(background, (0, 0))
    for bullet in bullets:
        bullet.draw(screen)
    for enemy in active_enemies:
        for bullet in enemy.bullets:
            bullet.draw(screen)
    P1.draw(screen)
    P1.draw_health_hearts(screen)
    
    screen.blit(arrow_image_rotated, arrow_rect.topleft) 
    score_text = font.render(f'Score: {score}', True, (255, 255, 255)) 
    text_width = score_text.get_width()  
    screen_width = screen.get_width() 
    screen.blit(score_text, ((screen_width - text_width) - 40, 20)) 


    if not P1.can_teleport(current_frame):
        remaining_cooldown = TELEPORT_COOLDOWN - (current_frame - P1.last_teleport_frame)
        draw_cooldown_bar(screen, 80, 100, 150, 15, remaining_cooldown, TELEPORT_COOLDOWN, (80, 80, 255))
        screen.blit(cooldown_icon, (20, 80))

    for enemy in active_enemies:
        if enemy.health > 0 or enemy.is_dead:  
            enemy.draw(screen) 
    pygame.display.update()

    FramePerSec.tick(FPS)
