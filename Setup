import pygame
from pygame.locals import *
import random
import sys
from tkinter import filedialog
from tkinter import *

pygame.init()

#Variables
FPS = 60
FramePerSec = pygame.time.Clock()
SPEED = 5
vec = pygame.math.Vector2
HEIGHT = 350
WIDTH = 700
ACC = 0.3
FRIC = -0.10
COUNT = 0
x = 50
y = 50
HEART_WIDTH = 30
HEART_HEIGHT = 30

#screen information
screen_width = 880
screen_height = 700
screen = pygame.display.set_mode((screen_width, screen_height),)
pygame.display.set_caption("Game")

#background
background = pygame.image.load("background.jpg")
background = pygame.transform.scale (background, (screen_width, screen_height))
screen_width, screen_height = background.get_size()

#colours
white = (255, 255, 255)
black = (0,0,0)
yellow = (255, 255, 200)
red = (215, 50, 80)
green = (0, 255, 0)
blue = (50, 150, 215)

#font
font = pygame.font.Font(None, 36)
text_color = (255, 255, 255)
def display_text(text, x, y):
    text_surface = font.render(text, True, text_color)
    screen.blit(text_surface, (x, y))

#start
def start_screen():
    title_font = pygame.font.Font(None, 90) 
    instructions_font = pygame.font.Font(None, 50) 

    title = title_font.render("MONOCRYPT", True, (255, 255, 255))
    title_rect = title.get_rect(center=(screen_width/2, screen_height/2))

    instructions = instructions_font.render("Press SPACE to Start", True, (255, 255, 255))
    instructions_rect = instructions.get_rect(center=(screen_width/2, screen_height/2 + 50))

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:  
                    return  

        screen.fill(black)
        screen.blit(title, title_rect)
        screen.blit(instructions, instructions_rect)
        pygame.display.flip()


#game over
def game_over_screen():
    font = pygame.font.Font(None, 36)
    text = font.render("You Died", True, (255, 0, 0))
    text_rect = text.get_rect(center=(screen_width/2, screen_height/2))

    retry_text = font.render("Press R to Retry", True, (255, 255, 255))
    retry_text_rect = retry_text.get_rect(center=(screen_width/2, screen_height/2 + 50))

    quit_text = font.render("Press Q to Quit", True, (255, 255, 255))
    quit_text_rect = quit_text.get_rect(center=(screen_width/2, screen_height/2 + 100))

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:  
                    return True  
                elif event.key == pygame.K_q:  
                    return False  

        screen.fill(black)
        screen.blit(text, text_rect)
        screen.blit(retry_text, retry_text_rect)
        screen.blit(quit_text, quit_text_rect)
        pygame.display.flip()

#bullets variables
bullets = []
shooting = False

class Bullet:
    def __init__(self, x, y, speed, direction, image):
        self.x = x
        self.y = y
        self.speed = speed
        self.direction = direction
        self.image = pygame.image.load(image)
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)

    def move(self):
        dir_norm = self.direction.normalize()
        self.rect.move_ip(dir_norm.x * self.speed, dir_norm.y * self.speed)
    def draw(self, screen):
        screen.blit(self.image, self.rect)


#player
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__() 
        self.x = x
        self.y = y
        self.image = pygame.image.load("player_front.png")
        self.is_animated = False
        self.sprite = []
        self.sprite.append(pygame.image.load("player_right_0000.png"))
        self.sprite.append(pygame.image.load("player_right_0001.png"))
        self.sprite.append(pygame.image.load("player_right_0002.png"))
        self.sprite.append(pygame.image.load("player_right_0003.png"))
        self.sprite.append(pygame.image.load("player_right_0004.png"))
        self.sprite.append(pygame.image.load("player_right_0005.png"))
        self.sprite.append(pygame.image.load("player_right_0006.png"))
        self.sprite.append(pygame.image.load("player_right_0007.png"))
        self.sprite.append(pygame.image.load("player_right_0008.png"))
        self.sprite.append(pygame.image.load("player_right_0009.png"))
        self.sprite.append(pygame.image.load("player_right_0010.png"))
        self.sprite.append(pygame.image.load("player_right_0011.png"))
        self.sprite.append(pygame.image.load("player_right_0012.png"))
        self.sprite.append(pygame.image.load("player_right_0013.png"))

        self.current_sprite = 0
        self.image = self.sprite[self.current_sprite]
        self.rect = self.image.get_rect()
        self.rect.center = (500, 250)
        self.direction = pygame.math.Vector2(0, -1)  

        self.health = 80
        self.heart_image = pygame.image.load("heart.png")
        self.heart_image = pygame.transform.scale(self.heart_image, (HEART_WIDTH, HEART_HEIGHT))

    def update(self):
        pressed_keys = pygame.key.get_pressed()
        if self.rect.top > 0:
            if pressed_keys[K_w]:
                self.image = pygame.image.load("player_front.png")
                self.rect = self.image.get_rect(topleft=self.rect.topleft)
                self.rect.move_ip(0, -SPEED)
                self.direction = pygame.math.Vector2(0, -1)  # Up
        if self.rect.bottom < screen_height:    
            if pressed_keys[K_s]:
                self.image = pygame.image.load("player_front.png")
                self.rect = self.image.get_rect(topleft=self.rect.topleft)
                self.rect.move_ip(0, SPEED)
                self.direction = pygame.math.Vector2(0, 1)  # Down
        if self.rect.left > 0:
            if pressed_keys[K_a]:
                self.image = pygame.image.load("player_left.png")
                self.rect = self.image.get_rect(topleft=self.rect.topleft)
                self.rect.move_ip(-SPEED, 0)
                self.direction = pygame.math.Vector2(-1, 0)  # Left
        if self.rect.right < screen_width:        
            if pressed_keys[K_d]:
                self.image = pygame.image.load("player_right_0000.png")
                self.rect = self.image.get_rect(topleft=self.rect.topleft)
                self.rect.move_ip(SPEED, 0)
                self.direction = pygame.math.Vector2(1, 0)  # Right

        
        if pressed_keys[K_a] or pressed_keys[K_d] or pressed_keys[K_w] or pressed_keys[K_s]:
            self.current_sprite += 0.2
            if self.current_sprite >= len(self.sprite):
                self.current_sprite = 0
            self.image = self.sprite[int(self.current_sprite)]

             
            if pressed_keys[K_a]:
                self.image = pygame.transform.flip(self.image, True, False)

    def draw(self, surface):
        surface.blit(self.image, self.rect)   
    
    #health bar
    def draw_health_hearts(self, surface):
        for i in range(self.health // 20):  # Assuming each heart represents 10 health points
            surface.blit(self.heart_image, (10 + i * HEART_WIDTH, 10))  # Draw a heart for each 10 health points

P1 = Player()

#Enemy
class Enemy:
    def __init__(self, x, y, speed, image):
        self.rect = pygame.Rect(x, y, 50, 50)  
        self.speed = speed
        self.image = pygame.image.load(image)
        self.image = pygame.transform.scale(self.image, (self.rect.width, self.rect.height)) 
        self.bullets = []
        self.shoot_delay = 45
        self.direction = pygame.math.Vector2(1, 2)
        self.health = 100

    def draw(self, surface):
        surface.blit(self.image, self.rect)

    def shoot(self, target):
        if self.shoot_delay <= 0:  
            dir_vector = vec(target.rect.centerx - self.rect.centerx, target.rect.centery - self.rect.centery)
            bullet = Bullet(self.rect.centerx, self.rect.centery, 6, dir_vector, 'bullet.png') 
            self.bullets.append(bullet)
            self.shoot_delay = 45 

    def update(self):
        if random.randint(0, 50) == 1:  
            new_direction = pygame.math.Vector2(random.uniform(-1, 1), random.uniform(-1, 1))

            
            new_x = self.rect.x + self.speed * new_direction[0]
            new_y = self.rect.y + self.speed * new_direction[1]

            
            if 0 <= new_x <= screen_width - self.rect.width and 0 <= new_y <= screen_height - self.rect.height:
                self.direction = new_direction   

        new_x = self.rect.x + self.speed * self.direction[0]
        new_y = self.rect.y + self.speed * self.direction[1]

        if 0 <= new_x <= screen_width - self.rect.width:
                    self.rect.x = new_x
        if 0 <= new_y <= screen_height - self.rect.height:
                    self.rect.y = new_y

        if self.shoot_delay > 0:
            self.shoot_delay -= 1

active_enemies = []
enemy = Enemy(100, 100, 2, 'enemy.png')

# Spawn New Enemies
enemy_count = 1

def spawn_new_enemies(num_enemies):
    for _ in range(num_enemies):
        new_enemy = Enemy(random.randint(0, screen_width - 50), random.randint(0, screen_height - 50), 2, 'enemy.png')
        active_enemies.append(new_enemy)

start_screen()
spawn_new_enemies(enemy_count)

#game loop
game = True
while game:
    for event in pygame.event.get(): 
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == MOUSEBUTTONDOWN:
            if event.button == 1:
                mouse_pos = pygame.mouse.get_pos()
                dir_vector = vec(mouse_pos[0] - P1.rect.centerx, mouse_pos[1] - P1.rect.centery)
                bullet = Bullet(P1.rect.centerx, P1.rect.centery, 6, dir_vector, 'bullet.png') 
                bullets.append(bullet)
                shooting = True 
        elif event.type == MOUSEBUTTONUP:
            if event.button == 1:
                shooting = False 

  
    for bullet in bullets:
        bullet.move()
    
    for bullet in bullets:
        bullet.draw(screen)
        for enemy in active_enemies:
            if bullet.rect.colliderect(enemy.rect):  # Check if the bullet collides with the enemy
                enemy.health -= 50  # Decrease the enemy's health
                bullets.remove(bullet)  # Remove the bullet
    
    for enemy in active_enemies:

        for bullet in enemy.bullets:
            bullet.move()

        enemy.update()
        enemy.draw(screen)

        if enemy.health > 0 and enemy.shoot_delay == 0:
            enemy.shoot(P1)

        if enemy.health <= 0:
            active_enemies.remove(enemy) # Removes enemy from active_enemies list when killed

        if not active_enemies:
            enemy_count += 1
            spawn_new_enemies(enemy_count) # Spawns new enemies when active_enemies list is empty
        
        for bullet in enemy.bullets:
            if P1.rect.colliderect(bullet.rect):
                P1.health -= 0 
                enemy.bullets.remove(bullet)  
                print(P1.health)

    if P1.health <= 0:
        if game_over_screen():  
            P1 = Player()
            active_enemies.clear()
            enemy = Enemy(100, 100, 2, 'enemy.png')
            enemy_count = 1
            spawn_new_enemies(enemy_count)
            bullets = []
        else:
            pygame.quit()
            sys.exit()
        
    P1.update()
    enemy.update()  

    screen.fill(white)
    screen.blit(background, (0, 0))
    for bullet in bullets:
        bullet.draw(screen)
    for enemy in active_enemies:
        for bullet in enemy.bullets:
            bullet.draw(screen)
    P1.draw(screen)
    P1.draw_health_hearts(screen)
    for enemy in active_enemies:

        health_text = f"Enemy Health: {enemy.health}"
        display_text(health_text, 10, 50)
    
        if enemy.health > 0:
            enemy.draw(screen) # Enemy only gets drawn when alive
    pygame.display.update()

    FramePerSec.tick(FPS)
